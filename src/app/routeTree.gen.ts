/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as mainRouteImport } from './routes/(main)/route'
import { Route as mainIndexImport } from './routes/(main)/index'

// Create/Update Routes

const mainRouteRoute = mainRouteImport.update({
  id: '/(main)',
  getParentRoute: () => rootRoute,
} as any)

const mainIndexRoute = mainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => mainRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(main)': {
      id: '/(main)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainRouteImport
      parentRoute: typeof rootRoute
    }
    '/(main)/': {
      id: '/(main)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainIndexImport
      parentRoute: typeof mainRouteImport
    }
  }
}

// Create and export the route tree

interface mainRouteRouteChildren {
  mainIndexRoute: typeof mainIndexRoute
}

const mainRouteRouteChildren: mainRouteRouteChildren = {
  mainIndexRoute: mainIndexRoute,
}

const mainRouteRouteWithChildren = mainRouteRoute._addFileChildren(
  mainRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof mainIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof mainIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(main)': typeof mainRouteRouteWithChildren
  '/(main)/': typeof mainIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/'
  id: '__root__' | '/(main)' | '/(main)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  mainRouteRoute: typeof mainRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  mainRouteRoute: mainRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(main)"
      ]
    },
    "/(main)": {
      "filePath": "(main)/route.tsx",
      "children": [
        "/(main)/"
      ]
    },
    "/(main)/": {
      "filePath": "(main)/index.tsx",
      "parent": "/(main)"
    }
  }
}
ROUTE_MANIFEST_END */
